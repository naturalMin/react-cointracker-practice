{"version":3,"sources":["api.tsx","routes/Chart.tsx","routes/Price.tsx","routes/Coin.tsx","routes/Coins.tsx","Router.tsx","theme.ts","App.tsx","index.tsx"],"names":["BASE_URL","fetchCoins","fetch","then","response","json","fetchCoinTickers","coinId","Chart","useQuery","endDate","Math","floor","Date","now","startDate","fetchCoinHistory","refetchInterval","isLoading","data","type","series","map","price","x","time_close","y","open","high","low","close","options","theme","mode","chart","height","width","toolbar","show","background","grid","xaxis","axisBorder","axisTicks","labels","style","colors","categories","yaxis","formatter","val","toFixed","Container","styled","div","Title","h1","props","textColor","Loader","PriceContainer","PriceList","Label","Value","Text","span","isPositive","PlusMinus","value","Price","useParams","quotes","USD","percent_change_15m","percent_change_1h","percent_change_24h","percent_change_7d","percent_change_30d","Header","header","Overview","OverviewItem","Description","p","Tabs","Tab","isActive","accentColor","Back","Coin","state","useLocation","priceMatch","useRouteMatch","chartMatch","fetchCoinInfo","infoLoading","infoData","tickersLoading","tickerData","loading","to","Helmet","name","symbol","description","total_supply","max_supply","path","CoinsList","ul","li","Img","img","Coins","slice","coin","pathname","id","src","toLowerCase","Router","process","darkTheme","bgColor","lightTheme","GlobalStyle","createGlobalStyle","App","useState","isDark","setIsDark","onClick","current","initialIsOpen","queryClient","QueryClient","ReactDOM","render","StrictMode","client","document","getElementById"],"mappings":"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","file":"static/js/main.384e567c.chunk.js","sourcesContent":["const BASE_URL = `https://api.coinpaprika.com/v1`\r\n\r\nexport function fetchCoins() {\r\n  return fetch(`${BASE_URL}/coins`)\r\n  .then((response) => response.json()\r\n  );\r\n}\r\n//Coins api호출\r\nexport function fetchCoinInfo(coinId: string) {\r\n  return fetch(`${BASE_URL}/coins/${coinId}`)\r\n  .then((response) => response.json()\r\n  );\r\n}\r\n//Coin - info api호출\r\nexport function fetchCoinTickers(coinId: string) {\r\n  return fetch(`${BASE_URL}/tickers/${coinId}`)\r\n  .then((response) => response.json()\r\n  );\r\n}\r\n//Coin - Ticker api호출\r\nexport function fetchCoinHistory(coinId: string) {\r\n  const endDate = Math.floor(Date.now() / 1000);\r\n  const startDate = endDate - 60 * 60 * 24 * 7 * 2; //2주 전\r\n  return fetch(`${BASE_URL}/coins/${coinId}/ohlcv/historical?start=${startDate}&end=${endDate}`)\r\n  .then((response) => response.json()\r\n  ); \r\n}  \r\n//Coin Chart api호출\r\n","import { fetchCoinHistory } from \"../api\";\r\nimport { useQuery } from \"react-query\";\r\nimport ApexChart from \"react-apexcharts\";\r\n\r\n\r\n//type\r\ninterface ChartProps {\r\n  coinId: string;\r\n}\r\ninterface IHistorical {\r\n  time_open: string;\r\n  time_close: string;\r\n  open: number;\r\n  high: number;\r\n  low: number;\r\n  close: number;\r\n  volume: number;\r\n  market_cap: number;\r\n}\r\n\r\nfunction Chart({ coinId }: ChartProps) {\r\n  const {isLoading, data} = useQuery<IHistorical[]>([\"ohlcv\", coinId],   \r\n  () => fetchCoinHistory(coinId),{\r\n    refetchInterval: 10000,\r\n  });\r\n  return (\r\n  <div>    \r\n    { isLoading ? \"Loading chart...\" : (\r\n      < ApexChart \r\n      type = \"candlestick\"\r\n      series = {[\r\n        {          \r\n          data: data?.map(price => ({\r\n            x: price.time_close,\r\n            y: [price.open, price.high, price.low, price.close],\r\n          })),\r\n        },          \r\n      ]}\r\n      options = {{\r\n        theme: {\r\n          mode: \"dark\" ,\r\n        },         \r\n        chart: {\r\n          height: 300,\r\n          width: 500,\r\n          toolbar: {\r\n            show: false,\r\n          },\r\n          background: \"transparant\"\r\n        },              \r\n        grid: {\r\n          show: true,\r\n        },      \r\n        xaxis: {\r\n          axisBorder: {show: true},\r\n          axisTicks: {show: true},\r\n          labels: {            \r\n            style: { colors: \"#2d3436\",}\r\n          },\r\n          type: \"datetime\",\r\n          categories: data?.map(price => price.time_close)\r\n        },\r\n        yaxis: {\r\n          show: true,          \r\n          labels: {\r\n            style: { colors: \"#2d3436\",},            \r\n            formatter: (val) => {\r\n              return val.toFixed(0);\r\n            }\r\n          }\r\n        },    \r\n      }}\r\n      />\r\n      )}\r\n  </div>\r\n  );\r\n}\r\n\r\nexport default Chart;","import { useParams } from \"react-router\";\r\nimport { useQuery } from \"react-query\";\r\nimport { fetchCoinTickers } from \"../api\";\r\nimport styled from \"styled-components\";\r\n\r\n//css\r\nconst Container = styled.div`\r\n  padding: 0 20px;\r\n  max-width: 500px;\r\n  margin: 0 auto;  \r\n`;\r\nconst Title = styled.h1`\r\n  color: ${props => props.theme.textColor};\r\n  font-size: 30px;\r\n  text-align: center;\r\n`;\r\nconst Loader = styled.div`\r\n  text-align: center;\r\n  display: block;\r\n`;\r\nconst PriceContainer = styled.div`\r\n    margin-top: 20px;        \r\n`;\r\nconst PriceList = styled.div`  \r\n  padding: 20px;\r\n  border: 1px solid ${props => props.theme.textColor};  \r\n  border-radius: 15px;\r\n  margin-bottom: 10px;\r\n  font-weight : bold;\r\n  display: flex;\r\n  justify-content: space-between;\r\n`;\r\nconst Label = styled.div``;\r\nconst Value = styled.div``;\r\nconst Text = styled.span<{isPositive: boolean}>`\r\n  color: ${props => props.isPositive? `#00b894`: `#ff7675`};\r\n`;\r\n//type\r\ninterface RouteParams {\r\n  coinId: string,\r\n}\r\n\r\ninterface PriceData {\r\n  id: string;\r\n  name: string;\r\n  symbol: string;\r\n  rank: number;\r\n  circulating_supply: number;\r\n  total_supply: number;\r\n  max_supply: number;\r\n  beta_value: number;\r\n  first_data_at: string;\r\n  last_updated: string;\r\n  //quotes: object;\r\n  quotes : {\r\n    USD: {\r\n      ath_date: string\r\n      ath_price: number\r\n      market_cap: number\r\n      market_cap_change_24h: number\r\n      percent_change_1h: number\r\n      percent_change_1y: number\r\n      percent_change_6h: number\r\n      percent_change_7d: number\r\n      percent_change_12h: number\r\n      percent_change_15m: number\r\n      percent_change_24h: number\r\n      percent_change_30d: number\r\n      percent_change_30m: number\r\n      percent_from_price_ath: number\r\n      price: number\r\n      volume_24h: number\r\n      volume_24h_change_24h: number\r\n    }    \r\n  }\r\n}\r\nfunction PlusMinus(value: number | undefined) {\r\n  if(value) {\r\n    return value > 0;\r\n  }\r\n}\r\n\r\nfunction Price() {\r\n  const { coinId } = useParams<RouteParams>();\r\n  const {isLoading, data} = useQuery<PriceData>(\r\n    [\"tickers\", coinId], () => fetchCoinTickers(coinId), {\r\n      refetchInterval: 5000,\r\n    }\r\n  );  \r\n  return (\r\n    <Container>\r\n      <Title>{coinId} Price</Title>\r\n      {isLoading? <Loader>Price loading...</Loader> : \r\n        (\r\n          <PriceContainer>\r\n            <PriceList>\r\n              <Label>Percent change (15minutes)</Label>\r\n              <Value>\r\n                <Text isPositive = {PlusMinus(data?.quotes.USD.percent_change_15m) === true }>\r\n                  {data?.quotes.USD.percent_change_15m}%\r\n                </Text>\r\n              </Value>\r\n            </PriceList>\r\n            <PriceList>\r\n              <Label>Percent change (1hour)</Label>\r\n              <Value>\r\n                <Text isPositive = {PlusMinus(data?.quotes.USD.percent_change_1h) === true }>\r\n                  {data?.quotes.USD.percent_change_1h}%\r\n                </Text>\r\n              </Value>\r\n            </PriceList>\r\n            <PriceList>\r\n              <Label>Percent change (1day)</Label>\r\n              <Value>\r\n                <Text isPositive = {PlusMinus(data?.quotes.USD.percent_change_24h) === true }>\r\n                  {data?.quotes.USD.percent_change_24h}%\r\n                </Text>\r\n              </Value>\r\n            </PriceList>\r\n            <PriceList>\r\n              <Label>Percent change (1Week)</Label>\r\n              <Value>\r\n                <Text isPositive = {PlusMinus(data?.quotes.USD.percent_change_7d) === true }>\r\n                  {data?.quotes.USD.percent_change_7d}%\r\n                </Text>\r\n              </Value>\r\n            </PriceList>\r\n            <PriceList>\r\n              <Label>Percent change (1month)</Label>\r\n              <Value>\r\n                <Text isPositive = {PlusMinus(data?.quotes.USD.percent_change_30d) === true }>\r\n                  {data?.quotes.USD.percent_change_30d}%\r\n                </Text>\r\n              </Value>\r\n            </PriceList>\r\n          </PriceContainer>        \r\n        )\r\n      }\r\n    </Container>    \r\n  );\r\n}\r\n\r\nexport default Price;","import { useParams, useLocation, Switch, Route, useRouteMatch } from \"react-router\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Chart from \"./Chart\";\r\nimport Price from \"./Price\";\r\nimport styled from \"styled-components\";\r\nimport { fetchCoinInfo, fetchCoinTickers } from \"../api\";\r\nimport { useQuery } from \"react-query\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\n//css\r\nconst Container = styled.div`\r\n  padding: 0 20px;\r\n  max-width: 500px;\r\n  margin: 0 auto;\r\n`;\r\nconst Header = styled.header`\r\n  height: 10vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\nconst Title = styled.h1`\r\n  color: ${props => props.theme.textColor};\r\n  font-size: 50px;\r\n`;\r\nconst Loader = styled.div`\r\n  text-align: center;\r\n  display: block;\r\n`;\r\nconst Overview = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  background-color: #dfe6e975;\r\n  padding: 10px 20px;\r\n  border-radius: 10px; \r\n`;\r\nconst OverviewItem = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  span:first-child {\r\n    font-size: 10px;\r\n    font-weight: 400;\r\n    text-transform: uppercase;\r\n    margin-bottom: 5px;\r\n  }\r\n`;\r\nconst Description = styled.p`\r\n  margin: 20px 0;\r\n`;\r\nconst Tabs = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  margin: 25px 0px;\r\n  gap: 10px;\r\n`;\r\nconst Tab = styled.span<{isActive : boolean}>`\r\n  text-align: center;\r\n  text-transform: uppercase;\r\n  font-size: 12px;\r\n  font-weight: 400;\r\n  color: ${props => props.theme.textColor};\r\n  padding: 7px 0px;\r\n  border-radius: 10px;\r\n  background-color: ${props => props.isActive ?\r\n    props.theme.accentColor : `#dfe6e975`};\r\n  a {\r\n    display: block;\r\n  }\r\n`;\r\nconst Back = styled.div`\r\n  text-align: center;\r\n  font-size: 12px;\r\n  width: 50px;  \r\n  background-color: ${props=> props.theme.accentColor};\r\n  border-radius: 10px;\r\n  margin-top: 5px;\r\n  padding: 7px 10px;  \r\n  a {\r\n    color: ${props=> props.theme.textColor};\r\n    display: block;\r\n  }\r\n`;\r\n\r\n//type \r\ninterface RouteParams {\r\n  coinId: string,\r\n}\r\ninterface RouteState {\r\n  name: string,\r\n}\r\ninterface InfoData {\r\n  id : string;\r\n  name : string;\r\n  symbol : string;\r\n  rank : number;\r\n  is_new : boolean;\r\n  is_active : boolean;\r\n  type : string;\r\n  contract : string;\r\n  platform : string;\r\n  description : string;\r\n  message : string;\r\n  open_source : boolean;\r\n  started_at : string;\r\n  development_status : string;\r\n  hardware_wallet : boolean;\r\n  proof_type : string;\r\n  org_structure : string;\r\n  hash_algorithm : string;\r\n  first_data_at : string;\r\n  last_data_at : string;\r\n}\r\ninterface PriceData {\r\n  id: string;\r\n  name: string;\r\n  symbol: string;\r\n  rank: number;\r\n  circulating_supply: number;\r\n  total_supply: number;\r\n  max_supply: number;\r\n  beta_value: number;\r\n  first_data_at: string;\r\n  last_updated: string;\r\n  //quotes: object;\r\n  quotes : {\r\n    USD: {\r\n      ath_date: string\r\n      ath_price: number\r\n      market_cap: number\r\n      market_cap_change_24h: number\r\n      percent_change_1h: number\r\n      percent_change_1y: number\r\n      percent_change_6h: number\r\n      percent_change_7d: number\r\n      percent_change_12h: number\r\n      percent_change_15m: number\r\n      percent_change_24h: number\r\n      percent_change_30d: number\r\n      percent_change_30m: number\r\n      percent_from_price_ath: number\r\n      price: number\r\n      volume_24h: number\r\n      volume_24h_change_24h: number\r\n    }    \r\n  }\r\n}\r\n//quotes 내부에 필요한 USD 가격정보가 있으므로 직접적으로 호출(console값 복사)\r\n\r\nfunction Coin() {\r\n  const { coinId } = useParams<RouteParams>();\r\n  const { state } = useLocation<RouteState>()\r\n  const priceMatch = useRouteMatch(\"/:coinId/price\");\r\n  const chartMatch = useRouteMatch(\"/:coinId/chart\");\r\n  //useRouteMatch : 클릭한 탭 속에 들어가있는 여부를 알려줌\r\n  const {isLoading: infoLoading, data: infoData} = useQuery<InfoData>\r\n  ([\"info\", coinId], () => fetchCoinInfo(coinId));\r\n  const {isLoading: tickersLoading, data: tickerData} = useQuery<PriceData>(\r\n    [\"tickers\", coinId], () => fetchCoinTickers(coinId), {\r\n      refetchInterval: 5000,\r\n    }\r\n  );\r\n  //fetch작업\r\n  //2개의 api호출 - 동일한 coinId가 매개, 구분을 위해 배열 첫번째 key로 설정\r\n  //js syntax를 통해 return값을 가져옴 ex. infoData, tickerData\r\n  const loading = infoLoading || tickersLoading;\r\n  return (\r\n    <Container>\r\n      <Back>\r\n          <Link to = \"/\">Back</Link>\r\n      </Back>\r\n      <Helmet>\r\n        <title>{state?.name ? state.name : loading? \"Loading...\" : infoData?.name}</title>\r\n      </Helmet>\r\n      <Header>                \r\n        <Title>{state?.name ? state.name : loading? \"Loading...\" : infoData?.name}</Title>\r\n        {/* inline 조건문의 중첩문 */}\r\n        {/* state.name (항상 state가 존재해야함) // ?. -> 존재할 때만 */}\r\n      </Header>\r\n      \r\n      {loading? <Loader>loading...</Loader> : \r\n        <>\r\n        <Overview>\r\n          <OverviewItem>\r\n            <span>Rank: </span>\r\n            <span>{infoData?.name}</span>            \r\n          </OverviewItem>\r\n          <OverviewItem>\r\n            <span>Symbol: </span>\r\n            <span>{infoData?.symbol}</span>            \r\n          </OverviewItem>\r\n          <OverviewItem>\r\n            <span>price: </span>\r\n            <span>${tickerData?.quotes.USD.price.toFixed(2)}</span>            \r\n          </OverviewItem>\r\n        </Overview>\r\n        <Description>\r\n          {infoData?.description}\r\n        </Description>\r\n        <Overview>\r\n          <OverviewItem>\r\n            <span>Total Supply: </span>\r\n            <span>{tickerData?.total_supply}</span>            \r\n          </OverviewItem>\r\n          <OverviewItem>\r\n            <span>Max Supply: </span>\r\n            <span>{tickerData?.max_supply}</span>            \r\n          </OverviewItem>\r\n        </Overview>\r\n        <Tabs>\r\n          <Tab isActive = {chartMatch !== null}>\r\n            <Link to = {`/${coinId}/chart`}>Chart</Link>\r\n          </Tab>\r\n          <Tab isActive = {priceMatch !== null}>\r\n            <Link to = {`/${coinId}/price`}>Price</Link>\r\n          </Tab>\r\n        </Tabs>\r\n        {/* Routing */}\r\n        <Switch>          \r\n          <Route path= {`/:coinId/price`}>\r\n            <Price />\r\n          </Route>\r\n          <Route path= {`/:coinId/chart`}>\r\n            <Chart coinId = {coinId} />\r\n          </Route>\r\n        </Switch>\r\n      </>\r\n      }      \r\n    </Container>    \r\n  );\r\n}\r\n\r\nexport default Coin;\r\n\r\n//state 설정은 coins 페이지에서 클릭했을 때 나타난다.\r\n//url로 직접 들어오면 에러가 난다.\r\n//따라서 state구문에 inline 조건문 처리","import styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useQuery } from \"react-query\";\r\nimport { fetchCoins } from \"../api\";\r\nimport { Helmet } from \"react-helmet\";\r\n//css\r\nconst Container = styled.div`\r\n  padding: 0 20px;\r\n  max-width: 500px;\r\n  margin: 0 auto;\r\n`;\r\nconst Header = styled.div`\r\n  height: 10vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\nconst CoinsList = styled.ul``;\r\nconst Coin = styled.li`  \r\n  color: ${props => props.theme.textColor};\r\n  padding: 20px;\r\n  border: 1px solid ${props => props.theme.textColor};\r\n  border-radius: 15px;\r\n  margin-bottom: 10px;\r\n  a {\r\n    display: block;\r\n    text-align: center;\r\n    font-size: 20px;    \r\n  }\r\n  &:hover {\r\n    color: ${props => props.theme.accentColor};\r\n    font-weight: bold;\r\n    border-bottom: 5px solid ${props => props.theme.accentColor};\r\n  }\r\n`;\r\nconst Title = styled.h1`\r\n  color: ${props => props.theme.textColor};\r\n  font-size: 50px;\r\n`;\r\nconst Loader = styled.div`\r\n  text-align: center;\r\n  display: block;\r\n`;\r\nconst Img = styled.img`\r\n  width: 20px;\r\n  height: 20px;\r\n  margin-right: 10px;\r\n`;\r\n//coins api type\r\ninterface Icoins {\r\n    id: string,\r\n    name: string,\r\n    symbol: string,\r\n    rank: number,\r\n    is_new: boolean,\r\n    is_active: boolean,\r\n    type : string \r\n} \r\n//coin top 50위 리스트 호출\r\nfunction Coins () {\r\n  const { isLoading, data } = useQuery<Icoins[]>(\"allCoins\", fetchCoins);\r\n  return(\r\n    <Container>\r\n      <Helmet>\r\n        <title>Coins</title>\r\n      </Helmet>\r\n      <Header>\r\n        <Title>Coins</Title>\r\n      </Header>\r\n      {isLoading ? <Loader>Loading...</Loader> : \r\n        (<CoinsList>\r\n          {data?.slice(0, 50).map(coin => \r\n          <Coin key = {coin.id} >\r\n            <Link to = {{\r\n                pathname: `./${coin.id}`, \r\n                state: {\r\n                  name: coin.name\r\n                  }\r\n                }}>\r\n              <Img src = {`https://cryptoicon-api.vercel.app/api/icon/${coin.symbol.toLowerCase()}`} />\r\n              {coin.name}\r\n            </Link>\r\n          </Coin> )}        \r\n        </CoinsList>)\r\n      }    \r\n      \r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Coins;","import { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\nimport Coin from \"./routes/Coin\";\r\nimport Coins from \"./routes/Coins\";\r\n\r\nfunction Router() {\r\n  return (\r\n    <BrowserRouter>\r\n      <Switch>\r\n        {/* 각 코인들 상세페이지 routing */}\r\n        <Route path = \"/:coinId\">\r\n          <Coin />\r\n        </Route>\r\n        {/* 코인 top 50 list routing */}\r\n        <Route path = {process.env.PUBLIC_URL + \"/\"}>\r\n          <Coins />\r\n        </Route> \r\n      </Switch>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default Router;","import { DefaultTheme } from \"styled-components\";\r\n\r\nexport const darkTheme: DefaultTheme = {\r\n  bgColor: \"#6c5ce7\",\r\n  textColor: \"#ffeaa7\",\r\n  accentColor: \"#ff7675\"\r\n}\r\n\r\nexport const lightTheme: DefaultTheme = {\r\n  bgColor: \"#ffeaa7\",\r\n  textColor: \"#2d3436\",\r\n  accentColor: \"#00cec9\"\r\n}","import Router from \"./Router\";\nimport { ThemeProvider, createGlobalStyle } from \"styled-components\";\n//Reset.css component\nimport { ReactQueryDevtools } from \"react-query/devtools\"\nimport { darkTheme, lightTheme } from \"./theme\";\nimport { useState } from \"react\";\n\nconst GlobalStyle  = createGlobalStyle`\n  @import url('https://fonts.googleapis.com/css2?family=Open+Sans&display=swap');\n  html, body, div, span, applet, object, iframe,\n  h1, h2, h3, h4, h5, h6, p, blockquote, pre,\n  a, abbr, acronym, address, big, cite, code,\n  del, dfn, em, img, ins, kbd, q, s, samp,\n  small, strike, strong, sub, sup, tt, var,\n  b, u, i, center,\n  dl, dt, dd, menu, ol, ul, li,\n  fieldset, form, label, legend,\n  table, caption, tbody, tfoot, thead, tr, th, td,\n  article, aside, canvas, details, embed,\n  figure, figcaption, footer, header, hgroup,\n  main, menu, nav, output, ruby, section, summary,\n  time, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n  }\n  /* HTML5 display-role reset for older browsers */\n  article, aside, details, figcaption, figure,\n  footer, header, hgroup, main, menu, nav, section {\n  display: block;\n  }\n  /* HTML5 hidden-attribute fix for newer browsers */\n  *[hidden] {\n  display: none;\n  }\n  body {\n  line-height: 1.2;  \n  }\n  menu, ol, ul {\n  list-style: none;\n  }\n  blockquote, q {\n  quotes: none;\n  }\n  blockquote:before, blockquote:after,\n  q:before, q:after {\n  content: '';\n  content: none;\n  }\n  table {\n  border-collapse: collapse;\n  border-spacing: 0;\n  }\n  //기본 Reset.css에서 추가\n  * {\n    box-sizing: border-box;\n  }\n  body {\n    font-family: 'Open Sans', sans-serif;\n    background-color: ${(props) => props.theme.bgColor};\n    color: ${(props) => props.theme.textColor};\n  }\n  a {\n    text-decoration: none;\n    color: inherit;\n  }\n  button {\n    border: 0px;\n    border-radius: 10px;\n    padding: 5px;\n    background-color: ${(props) => props.theme.accentColor};    \n  }\n`;\n\nfunction App() {\n  const [isDark, setIsDark] = useState(false);\n  const toggleDark = () => setIsDark(current => !current);\n  return (\n    <>\n      <ThemeProvider theme = {isDark? darkTheme : lightTheme}>\n        <button onClick = {toggleDark}>{isDark? \"Light mode\" : \"Dark mode\"}</button>\n        <GlobalStyle />\n        <Router />\n        <ReactQueryDevtools initialIsOpen = {true} />\n      </ThemeProvider>      \n    </>\n  );\n}\n//상위 컴포넌트인 App.tsx에 다음 하위 컴포넌트인 Router.tsx연동\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { QueryClient, QueryClientProvider } from 'react-query'\n\nconst queryClient = new QueryClient();\n\nReactDOM.render(\n  <React.StrictMode>\n    <QueryClientProvider client = {queryClient}>\n      <App />      \n    </QueryClientProvider>    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n//Theme -> index.js setting"],"sourceRoot":""}